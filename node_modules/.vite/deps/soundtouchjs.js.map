{
  "version": 3,
  "sources": ["../../soundtouchjs/src/FifoSampleBuffer.js", "../../soundtouchjs/src/AbstractFifoSamplePipe.js", "../../soundtouchjs/src/RateTransposer.js", "../../soundtouchjs/src/FilterSupport.js", "../../soundtouchjs/src/noop.js", "../../soundtouchjs/src/SimpleFilter.js", "../../soundtouchjs/src/Stretch.js", "../../soundtouchjs/src/testFloatEqual.js", "../../soundtouchjs/src/SoundTouch.js", "../../soundtouchjs/src/WebAudioBufferSource.js", "../../soundtouchjs/src/getWebAudioNode.js", "../../soundtouchjs/src/minsSecs.js", "../../soundtouchjs/src/PitchShifter.js"],
  "sourcesContent": ["/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FifoSampleBuffer {\n  constructor() {\n    this._vector = new Float32Array();\n    this._position = 0;\n    this._frameCount = 0;\n  }\n\n  get vector() {\n    return this._vector;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get startIndex() {\n    return this._position * 2;\n  }\n\n  get frameCount() {\n    return this._frameCount;\n  }\n\n  get endIndex() {\n    return (this._position + this._frameCount) * 2;\n  }\n\n  clear() {\n    this.receive(this._frameCount);\n    this.rewind();\n  }\n\n  put(numFrames) {\n    this._frameCount += numFrames;\n  }\n\n  putSamples(samples, position, numFrames = 0) {\n    position = position || 0;\n    const sourceOffset = position * 2;\n    if (!(numFrames >= 0)) {\n      numFrames = (samples.length - sourceOffset) / 2;\n    }\n    const numSamples = numFrames * 2;\n\n    this.ensureCapacity(numFrames + this._frameCount);\n\n    const destOffset = this.endIndex;\n    this.vector.set(\n      samples.subarray(sourceOffset, sourceOffset + numSamples),\n      destOffset\n    );\n\n    this._frameCount += numFrames;\n  }\n\n  putBuffer(buffer, position, numFrames = 0) {\n    position = position || 0;\n    if (!(numFrames >= 0)) {\n      numFrames = buffer.frameCount - position;\n    }\n    this.putSamples(buffer.vector, buffer.position + position, numFrames);\n  }\n\n  receive(numFrames) {\n    if (!(numFrames >= 0) || numFrames > this._frameCount) {\n      numFrames = this.frameCount;\n    }\n    this._frameCount -= numFrames;\n    this._position += numFrames;\n  }\n\n  receiveSamples(output, numFrames = 0) {\n    const numSamples = numFrames * 2;\n    const sourceOffset = this.startIndex;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n    this.receive(numFrames);\n  }\n\n  extract(output, position = 0, numFrames = 0) {\n    const sourceOffset = this.startIndex + position * 2;\n    const numSamples = numFrames * 2;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n  }\n\n  ensureCapacity(numFrames = 0) {\n    const minLength = parseInt(numFrames * 2);\n    if (this._vector.length < minLength) {\n      const newVector = new Float32Array(minLength);\n      newVector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._vector = newVector;\n      this._position = 0;\n    } else {\n      this.rewind();\n    }\n  }\n\n  ensureAdditionalCapacity(numFrames = 0) {\n    this.ensureCapacity(this._frameCount + numFrames);\n  }\n\n  rewind() {\n    if (this._position > 0) {\n      this._vector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._position = 0;\n    }\n  }\n}\n", "/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport FifoSampleBuffer from './FifoSampleBuffer';\n\nexport default class AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    if (createBuffers) {\n      this._inputBuffer = new FifoSampleBuffer();\n      this._outputBuffer = new FifoSampleBuffer();\n    } else {\n      this._inputBuffer = this._outputBuffer = null;\n    }\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  set inputBuffer(inputBuffer) {\n    this._inputBuffer = inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  set outputBuffer(outputBuffer) {\n    this._outputBuffer = outputBuffer;\n  }\n\n  clear() {\n    this._inputBuffer.clear();\n    this._outputBuffer.clear();\n  }\n}\n", "/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\nexport default class RateTransposer extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this.reset();\n    this._rate = 1;\n  }\n\n  set rate(rate) {\n    this._rate = rate;\n    // TODO: aa filter\n  }\n\n  reset() {\n    this.slopeCount = 0;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n  }\n\n  clone() {\n    const result = new RateTransposer();\n    result.rate = this._rate;\n    return result;\n  }\n\n  process() {\n    // TODO: aa filter\n    const numFrames = this._inputBuffer.frameCount;\n    this._outputBuffer.ensureAdditionalCapacity(numFrames / this._rate + 1);\n    const numFramesOutput = this.transpose(numFrames);\n    this._inputBuffer.receive();\n    this._outputBuffer.put(numFramesOutput);\n  }\n\n  transpose(numFrames = 0) {\n    if (numFrames === 0) {\n      return 0;\n    }\n\n    const src = this._inputBuffer.vector;\n    const srcOffset = this._inputBuffer.startIndex;\n\n    const dest = this._outputBuffer.vector;\n    const destOffset = this._outputBuffer.endIndex;\n\n    let used = 0;\n    let i = 0;\n\n    while (this.slopeCount < 1.0) {\n      dest[destOffset + 2 * i] =\n        (1.0 - this.slopeCount) * this.prevSampleL +\n        this.slopeCount * src[srcOffset];\n      dest[destOffset + 2 * i + 1] =\n        (1.0 - this.slopeCount) * this.prevSampleR +\n        this.slopeCount * src[srcOffset + 1];\n      i = i + 1;\n      this.slopeCount += this._rate;\n    }\n\n    this.slopeCount -= 1.0;\n\n    if (numFrames !== 1) {\n      // eslint-disable-next-line no-constant-condition\n      out: while (true) {\n        while (this.slopeCount > 1.0) {\n          this.slopeCount -= 1.0;\n          used = used + 1;\n          if (used >= numFrames - 1) {\n            break out;\n          }\n        }\n\n        const srcIndex = srcOffset + 2 * used;\n        dest[destOffset + 2 * i] =\n          (1.0 - this.slopeCount) * src[srcIndex] +\n          this.slopeCount * src[srcIndex + 2];\n        dest[destOffset + 2 * i + 1] =\n          (1.0 - this.slopeCount) * src[srcIndex + 1] +\n          this.slopeCount * src[srcIndex + 3];\n\n        i = i + 1;\n        this.slopeCount += this._rate;\n      }\n    }\n\n    this.prevSampleL = src[srcOffset + 2 * numFrames - 2];\n    this.prevSampleR = src[srcOffset + 2 * numFrames - 1];\n\n    return i;\n  }\n}\n", "/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FilterSupport {\n  constructor(pipe) {\n    this._pipe = pipe;\n  }\n\n  get pipe() {\n    return this._pipe;\n  }\n\n  get inputBuffer() {\n    return this._pipe.inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._pipe.outputBuffer;\n  }\n\n  fillInputBuffer(/*numFrames*/) {\n    throw new Error('fillInputBuffer() not overridden');\n  }\n\n  fillOutputBuffer(numFrames = 0) {\n    while (this.outputBuffer.frameCount < numFrames) {\n      // TODO hardcoded buffer size\n      const numInputFrames = 8192 * 2 - this.inputBuffer.frameCount;\n\n      this.fillInputBuffer(numInputFrames);\n\n      if (this.inputBuffer.frameCount < 8192 * 2) {\n        break;\n        // TODO: flush pipe\n      }\n      this._pipe.process();\n    }\n  }\n\n  clear() {\n    this._pipe.clear();\n  }\n}\n", "const noop = function() {\n  return;\n};\n\nexport default noop;\n", "/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport FilterSupport from './FilterSupport';\nimport noop from './noop';\n\nexport default class SimpleFilter extends FilterSupport {\n  constructor(sourceSound, pipe, callback = noop) {\n    super(pipe);\n    this.callback = callback;\n    this.sourceSound = sourceSound;\n    //this.bufferDuration = sourceSound.buffer.duration;\n    this.historyBufferSize = 22050;\n    this._sourcePosition = 0;\n    this.outputBufferPosition = 0;\n    this._position = 0;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(position) {\n    if (position > this._position) {\n      throw new RangeError(\n        'New position may not be greater than current position'\n      );\n    }\n    const newOutputBufferPosition =\n      this.outputBufferPosition - (this._position - position);\n    if (newOutputBufferPosition < 0) {\n      throw new RangeError('New position falls outside of history buffer');\n    }\n    this.outputBufferPosition = newOutputBufferPosition;\n    this._position = position;\n  }\n\n  get sourcePosition() {\n    return this._sourcePosition;\n  }\n\n  set sourcePosition(sourcePosition) {\n    this.clear();\n    this._sourcePosition = sourcePosition;\n  }\n\n  onEnd() {\n    this.callback();\n  }\n\n  fillInputBuffer(numFrames = 0) {\n    const samples = new Float32Array(numFrames * 2);\n    const numFramesExtracted = this.sourceSound.extract(\n      samples,\n      numFrames,\n      this._sourcePosition\n    );\n    this._sourcePosition += numFramesExtracted;\n    this.inputBuffer.putSamples(samples, 0, numFramesExtracted);\n  }\n\n  extract(target, numFrames = 0) {\n    this.fillOutputBuffer(this.outputBufferPosition + numFrames);\n\n    const numFramesExtracted = Math.min(\n      numFrames,\n      this.outputBuffer.frameCount - this.outputBufferPosition\n    );\n    this.outputBuffer.extract(\n      target,\n      this.outputBufferPosition,\n      numFramesExtracted\n    );\n\n    const currentFrames = this.outputBufferPosition + numFramesExtracted;\n    this.outputBufferPosition = Math.min(this.historyBufferSize, currentFrames);\n    this.outputBuffer.receive(\n      Math.max(currentFrames - this.historyBufferSize, 0)\n    );\n\n    this._position += numFramesExtracted;\n    return numFramesExtracted;\n  }\n\n  handleSampleData(event) {\n    this.extract(event.data, 4096);\n  }\n\n  clear() {\n    super.clear();\n    this.outputBufferPosition = 0;\n  }\n}\n", "/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\n/**\n * Giving this value for the sequence length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEQUENCE_LEN = 0;\n\n/**\n * Default length of a single processing sequence, in milliseconds. This determines to how\n * long sequences the original sound is chopped in the time-stretch algorithm.\n *\n * The larger this value is, the lesser sequences are used in processing. In principle\n * a bigger value sounds better when slowing down tempo, but worse when increasing tempo\n * and vice versa.\n *\n * Increasing this value reduces computational burden and vice versa.\n */\n//const DEFAULT_SEQUENCE_MS = 130\nconst DEFAULT_SEQUENCE_MS = USE_AUTO_SEQUENCE_LEN;\n\n/**\n * Giving this value for the seek window length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEEKWINDOW_LEN = 0;\n\n/**\n * Seeking window default length in milliseconds for algorithm that finds the best possible\n * overlapping location. This determines from how wide window the algorithm may look for an\n * optimal joining location when mixing the sound sequences back together.\n *\n * The bigger this window setting is, the higher the possibility to find a better mixing\n * position will become, but at the same time large values may cause a 'drifting' artifact\n * because consequent sequences will be taken at more uneven intervals.\n *\n * If there's a disturbing artifact that sounds as if a constant frequency was drifting\n * around, try reducing this setting.\n *\n * Increasing this value increases computational burden and vice versa.\n */\n//const DEFAULT_SEEKWINDOW_MS = 25;\nconst DEFAULT_SEEKWINDOW_MS = USE_AUTO_SEEKWINDOW_LEN;\n\n/**\n * Overlap length in milliseconds. When the chopped sound sequences are mixed back together,\n * to form a continuous sound stream, this parameter defines over how long period the two\n * consecutive sequences are let to overlap each other.\n *\n * This shouldn't be that critical parameter. If you reduce the DEFAULT_SEQUENCE_MS setting\n * by a large amount, you might wish to try a smaller value on this.\n *\n * Increasing this value increases computational burden and vice versa.\n */\nconst DEFAULT_OVERLAP_MS = 8;\n\n// Table for the hierarchical mixing position seeking algorithm\nconst _SCAN_OFFSETS = [\n  [\n    124, 186, 248, 310, 372, 434, 496, 558, 620, 682, 744, 806, 868, 930, 992,\n    1054, 1116, 1178, 1240, 1302, 1364, 1426, 1488, 0,\n  ],\n  [\n    -100, -75, -50, -25, 25, 50, 75, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0,\n  ],\n  [\n    -20, -15, -10, -5, 5, 10, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0,\n  ],\n  [-4, -3, -2, -1, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\n// Adjust tempo param according to tempo, so that variating processing sequence length is used\n// at varius tempo settings, between the given low...top limits\nconst AUTOSEQ_TEMPO_LOW = 0.5; // auto setting low tempo range (-50%)\nconst AUTOSEQ_TEMPO_TOP = 2.0; // auto setting top tempo range (+100%)\n\n// sequence-ms setting values at above low & top tempo\nconst AUTOSEQ_AT_MIN = 125.0;\nconst AUTOSEQ_AT_MAX = 50.0;\nconst AUTOSEQ_K =\n  (AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEQ_C = AUTOSEQ_AT_MIN - AUTOSEQ_K * AUTOSEQ_TEMPO_LOW;\n\n// seek-window-ms setting values at above low & top tempo\nconst AUTOSEEK_AT_MIN = 25.0;\nconst AUTOSEEK_AT_MAX = 15.0;\nconst AUTOSEEK_K =\n  (AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEEK_C = AUTOSEEK_AT_MIN - AUTOSEEK_K * AUTOSEQ_TEMPO_LOW;\n\nexport default class Stretch extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this._quickSeek = true;\n    this.midBufferDirty = false;\n\n    this.midBuffer = null;\n    this.overlapLength = 0;\n\n    this.autoSeqSetting = true;\n    this.autoSeekSetting = true;\n\n    this._tempo = 1;\n    this.setParameters(\n      44100,\n      DEFAULT_SEQUENCE_MS,\n      DEFAULT_SEEKWINDOW_MS,\n      DEFAULT_OVERLAP_MS\n    );\n  }\n\n  clear() {\n    super.clear();\n    this.clearMidBuffer();\n  }\n\n  clearMidBuffer() {\n    if (this.midBufferDirty) {\n      this.midBufferDirty = false;\n      this.midBuffer = null;\n    }\n  }\n\n  /**\n   * Sets routine control parameters. These control are certain time constants\n   * defining how the sound is stretched to the desired duration.\n   *\n   * 'sampleRate' = sample rate of the sound\n   * 'sequenceMS' = one processing sequence length in milliseconds (default = 82 ms)\n   * 'seekwindowMS' = seeking window length for scanning the best overlapping\n   *      position (default = 28 ms)\n   * 'overlapMS' = overlapping length (default = 12 ms)\n   */\n  setParameters(sampleRate, sequenceMs, seekWindowMs, overlapMs) {\n    // accept only positive parameter values - if zero or negative, use old values instead\n    if (sampleRate > 0) {\n      this.sampleRate = sampleRate;\n    }\n\n    if (overlapMs > 0) {\n      this.overlapMs = overlapMs;\n    }\n\n    if (sequenceMs > 0) {\n      this.sequenceMs = sequenceMs;\n      this.autoSeqSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeqSetting = true;\n    }\n\n    if (seekWindowMs > 0) {\n      this.seekWindowMs = seekWindowMs;\n      this.autoSeekSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeekSetting = true;\n    }\n\n    this.calculateSequenceParameters();\n\n    this.calculateOverlapLength(this.overlapMs);\n\n    // set tempo to recalculate 'sampleReq'\n    this.tempo = this._tempo;\n  }\n\n  /**\n   * Sets new target tempo. Normal tempo = 'SCALE', smaller values represent slower\n   * tempo, larger faster tempo.\n   */\n  set tempo(newTempo) {\n    let intskip;\n\n    this._tempo = newTempo;\n\n    // Calculate new sequence duration\n    this.calculateSequenceParameters();\n\n    // Calculate ideal skip length (according to tempo value)\n    this.nominalSkip =\n      this._tempo * (this.seekWindowLength - this.overlapLength);\n    this.skipFract = 0;\n    intskip = Math.floor(this.nominalSkip + 0.5);\n\n    // Calculate how many samples are needed in the 'inputBuffer' to process another batch of samples\n    this.sampleReq =\n      Math.max(intskip + this.overlapLength, this.seekWindowLength) +\n      this.seekLength;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  get inputChunkSize() {\n    return this.sampleReq;\n  }\n\n  get outputChunkSize() {\n    return (\n      this.overlapLength +\n      Math.max(0, this.seekWindowLength - 2 * this.overlapLength)\n    );\n  }\n\n  /**\n   * Calculates overlapInMsec period length in samples.\n   */\n  calculateOverlapLength(overlapInMsec = 0) {\n    let newOvl;\n\n    // TODO assert(overlapInMsec >= 0);\n    newOvl = (this.sampleRate * overlapInMsec) / 1000;\n    newOvl = newOvl < 16 ? 16 : newOvl;\n\n    // must be divisible by 8\n    newOvl -= newOvl % 8;\n\n    this.overlapLength = newOvl;\n\n    this.refMidBuffer = new Float32Array(this.overlapLength * 2);\n    this.midBuffer = new Float32Array(this.overlapLength * 2);\n  }\n\n  checkLimits(x, mi, ma) {\n    return x < mi ? mi : x > ma ? ma : x;\n  }\n\n  /**\n   * Calculates processing sequence length according to tempo setting\n   */\n  calculateSequenceParameters() {\n    let seq;\n    let seek;\n\n    if (this.autoSeqSetting) {\n      seq = AUTOSEQ_C + AUTOSEQ_K * this._tempo;\n      seq = this.checkLimits(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);\n      this.sequenceMs = Math.floor(seq + 0.5);\n    }\n\n    if (this.autoSeekSetting) {\n      seek = AUTOSEEK_C + AUTOSEEK_K * this._tempo;\n      seek = this.checkLimits(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);\n      this.seekWindowMs = Math.floor(seek + 0.5);\n    }\n\n    // Update seek window lengths\n    this.seekWindowLength = Math.floor(\n      (this.sampleRate * this.sequenceMs) / 1000\n    );\n    this.seekLength = Math.floor((this.sampleRate * this.seekWindowMs) / 1000);\n  }\n\n  /**\n   * Enables/disables the quick position seeking algorithm.\n   */\n  set quickSeek(enable) {\n    this._quickSeek = enable;\n  }\n\n  clone() {\n    const result = new Stretch();\n    result.tempo = this._tempo;\n    result.setParameters(\n      this.sampleRate,\n      this.sequenceMs,\n      this.seekWindowMs,\n      this.overlapMs\n    );\n    return result;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position.\n   */\n  seekBestOverlapPosition() {\n    return this._quickSeek\n      ? this.seekBestOverlapPositionStereoQuick()\n      : this.seekBestOverlapPositionStereo();\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereo() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let i = 0;\n\n    // Slopes the amplitudes of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestOffset = 0;\n    bestCorrelation = Number.MIN_VALUE;\n\n    // Scans for the best correlation value by testing each possible position over the permitted range\n    for (; i < this.seekLength; i = i + 1) {\n      // Calculates correlation value for the mixing position corresponding to 'i'\n      correlation = this.calculateCrossCorrelationStereo(\n        2 * i,\n        this.refMidBuffer\n      );\n\n      // Checks for the highest correlation value\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestOffset = i;\n      }\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereoQuick() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let scanCount = 0;\n    let correlationOffset;\n    let tempOffset;\n\n    // Slopes the amplitude of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestCorrelation = Number.MIN_VALUE;\n    bestOffset = 0;\n    correlationOffset = 0;\n    tempOffset = 0;\n\n    // Scans for the best correlation value using four-pass hierarchical search.\n    //\n    // The look-up table 'scans' has hierarchical position adjusting steps.\n    // In first pass the routine searhes for the highest correlation with\n    // relatively coarse steps, then rescans the neighbourhood of the highest\n    // correlation with better resolution and so on.\n    for (; scanCount < 4; scanCount = scanCount + 1) {\n      let j = 0;\n      while (_SCAN_OFFSETS[scanCount][j]) {\n        tempOffset = correlationOffset + _SCAN_OFFSETS[scanCount][j];\n        if (tempOffset >= this.seekLength) {\n          break;\n        }\n\n        // Calculates correlation value for the mixing position corresponding to 'tempOffset'\n        correlation = this.calculateCrossCorrelationStereo(\n          2 * tempOffset,\n          this.refMidBuffer\n        );\n\n        // Checks for the highest correlation value\n        if (correlation > bestCorrelation) {\n          bestCorrelation = correlation;\n          bestOffset = tempOffset;\n        }\n        j = j + 1;\n      }\n      correlationOffset = bestOffset;\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Slopes the amplitude of the 'midBuffer' samples so that cross correlation\n   * is faster to calculate\n   */\n  preCalculateCorrelationReferenceStereo() {\n    let i = 0;\n    let context;\n    let temp;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      temp = i * (this.overlapLength - i);\n      context = i * 2;\n      this.refMidBuffer[context] = this.midBuffer[context] * temp;\n      this.refMidBuffer[context + 1] = this.midBuffer[context + 1] * temp;\n    }\n  }\n\n  calculateCrossCorrelationStereo(mixingPosition, compare) {\n    const mixing = this._inputBuffer.vector;\n    mixingPosition += this._inputBuffer.startIndex;\n\n    let correlation = 0;\n    let i = 2;\n    const calcLength = 2 * this.overlapLength;\n    let mixingOffset;\n\n    for (; i < calcLength; i = i + 2) {\n      mixingOffset = i + mixingPosition;\n      correlation +=\n        mixing[mixingOffset] * compare[i] +\n        mixing[mixingOffset + 1] * compare[i + 1];\n    }\n\n    return correlation;\n  }\n\n  // TODO inline\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInputBuffer' at position\n   * of 'ovlPos'.\n   */\n  overlap(overlapPosition) {\n    this.overlapStereo(2 * overlapPosition);\n  }\n\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInput'\n   */\n  overlapStereo(inputPosition) {\n    const input = this._inputBuffer.vector;\n    inputPosition += this._inputBuffer.startIndex;\n\n    const output = this._outputBuffer.vector;\n    const outputPosition = this._outputBuffer.endIndex;\n\n    let i = 0;\n    let context;\n    let tempFrame;\n    const frameScale = 1 / this.overlapLength;\n    let fi;\n    let inputOffset;\n    let outputOffset;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      tempFrame = (this.overlapLength - i) * frameScale;\n      fi = i * frameScale;\n      context = 2 * i;\n      inputOffset = context + inputPosition;\n      outputOffset = context + outputPosition;\n      output[outputOffset + 0] =\n        input[inputOffset + 0] * fi + this.midBuffer[context + 0] * tempFrame;\n      output[outputOffset + 1] =\n        input[inputOffset + 1] * fi + this.midBuffer[context + 1] * tempFrame;\n    }\n  }\n\n  process() {\n    let offset;\n    let temp;\n    let overlapSkip;\n\n    if (this.midBuffer === null) {\n      // if midBuffer is empty, move the first samples of the input stream into it\n      if (this._inputBuffer.frameCount < this.overlapLength) {\n        // wait until we've got the overlapLength samples\n        return;\n      }\n      this.midBuffer = new Float32Array(this.overlapLength * 2);\n      this._inputBuffer.receiveSamples(this.midBuffer, this.overlapLength);\n    }\n\n    // Process samples as long as there are enough samples in 'inputBuffer' to form a processing frame\n    while (this._inputBuffer.frameCount >= this.sampleReq) {\n      // If tempo differs from the normal ('SCALE'), scan for hte best overlapping position\n      offset = this.seekBestOverlapPosition();\n\n      /**\n       * Mix the samples in the 'inputBuffer' at position of 'offset' with the samples in 'midBuffer'\n       * using sliding overlapping\n       * ... first partially overlap with the end of the previous sequence (that's in 'midBuffer')\n       */\n      this._outputBuffer.ensureAdditionalCapacity(this.overlapLength);\n      // FIXME unit?\n      // overlap(uint(offset));\n      this.overlap(Math.floor(offset));\n      this._outputBuffer.put(this.overlapLength);\n\n      // ... then copy sequence samples from 'inputBuffer' to output\n      temp = this.seekWindowLength - 2 * this.overlapLength; // & 0xfffffffe;\n      if (temp > 0) {\n        this._outputBuffer.putBuffer(\n          this._inputBuffer,\n          offset + this.overlapLength,\n          temp\n        );\n      }\n\n      /**\n       * Copies the end of the current sequence from 'inputBuffer' to 'midBuffer' for being mixed with\n       * the beginning of the next processing sequence and so on\n       */\n      // assert(offset + seekWindowLength <= (int)inputBuffer.numSamples());\n      const start =\n        this._inputBuffer.startIndex +\n        2 * (offset + this.seekWindowLength - this.overlapLength);\n      this.midBuffer.set(\n        this._inputBuffer.vector.subarray(start, start + 2 * this.overlapLength)\n      );\n\n      /**\n       * Remove the processed samples from the input buffer. Update the difference between\n       * integer & nominal skip step to 'skipFract' in order to prevent the error from\n       * accumulating over time\n       */\n      this.skipFract += this.nominalSkip; // real skip size\n      overlapSkip = Math.floor(this.skipFract);\n      this.skipFract -= overlapSkip;\n      this._inputBuffer.receive(overlapSkip);\n    }\n  }\n}\n", "const testFloatEqual = function(a, b) {\n  return (a > b ? a - b : b - a) > 1e-10;\n};\n\nexport default testFloatEqual;\n", "/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport RateTransposer from './RateTransposer';\nimport Stretch from './Stretch';\nimport FifoSampleBuffer from './FifoSampleBuffer';\nimport testFloatEqual from './testFloatEqual';\n\nexport default class SoundTouch {\n  constructor() {\n    this.transposer = new RateTransposer(false);\n    this.stretch = new Stretch(false);\n\n    this._inputBuffer = new FifoSampleBuffer();\n    this._intermediateBuffer = new FifoSampleBuffer();\n    this._outputBuffer = new FifoSampleBuffer();\n\n    this._rate = 0;\n    this._tempo = 0;\n\n    this.virtualPitch = 1.0;\n    this.virtualRate = 1.0;\n    this.virtualTempo = 1.0;\n\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  clear() {\n    this.transposer.clear();\n    this.stretch.clear();\n  }\n\n  clone() {\n    const result = new SoundTouch();\n    result.rate = this.rate;\n    result.tempo = this.tempo;\n    return result;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(rate) {\n    this.virtualRate = rate;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set rateChange(rateChange) {\n    this._rate = 1.0 + 0.01 * rateChange;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  set tempo(tempo) {\n    this.virtualTempo = tempo;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set tempoChange(tempoChange) {\n    this.tempo = 1.0 + 0.01 * tempoChange;\n  }\n\n  set pitch(pitch) {\n    this.virtualPitch = pitch;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchOctaves(pitchOctaves) {\n    this.pitch = Math.exp(0.69314718056 * pitchOctaves);\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchSemitones(pitchSemitones) {\n    this.pitchOctaves = pitchSemitones / 12.0;\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  calculateEffectiveRateAndTempo() {\n    const previousTempo = this._tempo;\n    const previousRate = this._rate;\n\n    this._tempo = this.virtualTempo / this.virtualPitch;\n    this._rate = this.virtualRate * this.virtualPitch;\n\n    if (testFloatEqual(this._tempo, previousTempo)) {\n      this.stretch.tempo = this._tempo;\n    }\n    if (testFloatEqual(this._rate, previousRate)) {\n      this.transposer.rate = this._rate;\n    }\n\n    if (this._rate > 1.0) {\n      if (this._outputBuffer != this.transposer.outputBuffer) {\n        this.stretch.inputBuffer = this._inputBuffer;\n        this.stretch.outputBuffer = this._intermediateBuffer;\n\n        this.transposer.inputBuffer = this._intermediateBuffer;\n        this.transposer.outputBuffer = this._outputBuffer;\n      }\n    } else {\n      if (this._outputBuffer != this.stretch.outputBuffer) {\n        this.transposer.inputBuffer = this._inputBuffer;\n        this.transposer.outputBuffer = this._intermediateBuffer;\n\n        this.stretch.inputBuffer = this._intermediateBuffer;\n        this.stretch.outputBuffer = this._outputBuffer;\n      }\n    }\n  }\n\n  process() {\n    if (this._rate > 1.0) {\n      this.stretch.process();\n      this.transposer.process();\n    } else {\n      this.transposer.process();\n      this.stretch.process();\n    }\n  }\n}\n", "/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class WebAudioBufferSource {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this._position = 0;\n  }\n\n  get dualChannel() {\n    return this.buffer.numberOfChannels > 1;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n  }\n\n  extract(target, numFrames = 0, position = 0) {\n    this.position = position;\n    let left = this.buffer.getChannelData(0);\n    let right = this.dualChannel\n      ? this.buffer.getChannelData(1)\n      : this.buffer.getChannelData(0);\n    let i = 0;\n    for (; i < numFrames; i++) {\n      target[i * 2] = left[i + position];\n      target[i * 2 + 1] = right[i + position];\n    }\n    return Math.min(numFrames, left.length - position);\n  }\n}\n", "import noop from './noop';\n/**\n * getWebAudioNode\n *\n * A wrapper to create an AudioNode and apply a filter for frame extraction\n * Copyright (c) Adrian Holovary https://github.com/adrianholovaty\n *\n * @param context - AudioContext\n * @param filter - Object containing an 'extract()' method\n * @param bufferSize - units of sample frames (256, 512, 1024, 2048, 4096, 8192, 16384)\n * @returns {ScriptProcessorNode}\n */\nconst getWebAudioNode = function(\n  context,\n  filter,\n  sourcePositionCallback = noop,\n  bufferSize = 4096\n) {\n  const node = context.createScriptProcessor(bufferSize, 2, 2);\n  const samples = new Float32Array(bufferSize * 2);\n\n  node.onaudioprocess = event => {\n    let left = event.outputBuffer.getChannelData(0);\n    let right = event.outputBuffer.getChannelData(1);\n    let framesExtracted = filter.extract(samples, bufferSize);\n    sourcePositionCallback(filter.sourcePosition);\n    if (framesExtracted === 0) {\n      filter.onEnd();\n    }\n    let i = 0;\n    for (; i < framesExtracted; i++) {\n      left[i] = samples[i * 2];\n      right[i] = samples[i * 2 + 1];\n    }\n  };\n  return node;\n};\n\nexport default getWebAudioNode;\n", "const pad = function(n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\n\nconst minsSecs = function(secs) {\n  const mins = Math.floor(secs / 60);\n  const seconds = secs - mins * 60;\n  return `${mins}:${pad(parseInt(seconds), 2)}`;\n};\n\nexport default minsSecs;\n", "/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport WebAudioBufferSource from './WebAudioBufferSource';\nimport getWebAudioNode from './getWebAudioNode';\nimport SoundTouch from './SoundTouch';\nimport SimpleFilter from './SimpleFilter';\nimport minsSecs from './minsSecs';\nimport noop from './noop';\n\nconst onUpdate = function (sourcePosition) {\n  const currentTimePlayed = this.timePlayed;\n  const sampleRate = this.sampleRate;\n  this.sourcePosition = sourcePosition;\n  this.timePlayed = sourcePosition / sampleRate;\n  if (currentTimePlayed !== this.timePlayed) {\n    const timePlayed = new CustomEvent('play', {\n      detail: {\n        timePlayed: this.timePlayed,\n        formattedTimePlayed: this.formattedTimePlayed,\n        percentagePlayed: this.percentagePlayed,\n      },\n    });\n    this._node.dispatchEvent(timePlayed);\n  }\n};\n\nexport default class PitchShifter {\n  constructor(context, buffer, bufferSize, onEnd = noop) {\n    this._soundtouch = new SoundTouch();\n    const source = new WebAudioBufferSource(buffer);\n    this.timePlayed = 0;\n    this.sourcePosition = 0;\n    this._filter = new SimpleFilter(source, this._soundtouch, onEnd);\n    this._node = getWebAudioNode(\n      context,\n      this._filter,\n      (sourcePostion) => onUpdate.call(this, sourcePostion),\n      bufferSize\n    );\n    this.tempo = 1;\n    this.rate = 1;\n    this.duration = buffer.duration;\n    this.sampleRate = context.sampleRate;\n    this.listeners = [];\n  }\n\n  get formattedDuration() {\n    return minsSecs(this.duration);\n  }\n\n  get formattedTimePlayed() {\n    return minsSecs(this.timePlayed);\n  }\n\n  get percentagePlayed() {\n    return (\n      (100 * this._filter.sourcePosition) / (this.duration * this.sampleRate)\n    );\n  }\n\n  set percentagePlayed(perc) {\n    this._filter.sourcePosition = parseInt(\n      perc * this.duration * this.sampleRate\n    );\n    this.sourcePosition = this._filter.sourcePosition;\n    this.timePlayed = this.sourcePosition / this.sampleRate;\n  }\n\n  get node() {\n    return this._node;\n  }\n\n  set pitch(pitch) {\n    this._soundtouch.pitch = pitch;\n  }\n\n  set pitchSemitones(semitone) {\n    this._soundtouch.pitchSemitones = semitone;\n  }\n\n  set rate(rate) {\n    this._soundtouch.rate = rate;\n  }\n\n  set tempo(tempo) {\n    this._soundtouch.tempo = tempo;\n  }\n\n  connect(toNode) {\n    this._node.connect(toNode);\n  }\n\n  disconnect() {\n    this._node.disconnect();\n  }\n\n  on(eventName, cb) {\n    this.listeners.push({ name: eventName, cb: cb });\n    this._node.addEventListener(eventName, (event) => cb(event.detail));\n  }\n\n  off(eventName = null) {\n    let listeners = this.listeners;\n    if (eventName) {\n      listeners = listeners.filter((e) => e.name === eventName);\n    }\n    listeners.forEach((e) => {\n      this._node.removeEventListener(e.name, (event) => e.cb(event.detail));\n    });\n  }\n}\n"],
  "mappings": ";AAsBe,IAAMA,mBAAN,MAAuB;EACpCC,cAAc;AACZ,SAAKC,UAAU,IAAIC,aAAJ;AACf,SAAKC,YAAY;AACjB,SAAKC,cAAc;EACpB;EAES,IAANC,SAAS;AACX,WAAO,KAAKJ;EACb;EAEW,IAARK,WAAW;AACb,WAAO,KAAKH;EACb;EAEa,IAAVI,aAAa;AACf,WAAO,KAAKJ,YAAY;EACzB;EAEa,IAAVK,aAAa;AACf,WAAO,KAAKJ;EACb;EAEW,IAARK,WAAW;AACb,YAAQ,KAAKN,YAAY,KAAKC,eAAe;EAC9C;EAEDM,QAAQ;AACN,SAAKC,QAAQ,KAAKP,WAAlB;AACA,SAAKQ,OAAL;EACD;EAEDC,IAAIC,WAAW;AACb,SAAKV,eAAeU;EACrB;EAEDC,WAAWC,SAASV,UAAUQ,YAAY,GAAG;AAC3CR,eAAWA,YAAY;AACvB,UAAMW,eAAeX,WAAW;AAChC,QAAI,EAAEQ,aAAa,IAAI;AACrBA,mBAAaE,QAAQE,SAASD,gBAAgB;IAC/C;AACD,UAAME,aAAaL,YAAY;AAE/B,SAAKM,eAAeN,YAAY,KAAKV,WAArC;AAEA,UAAMiB,aAAa,KAAKZ;AACxB,SAAKJ,OAAOiB,IACVN,QAAQO,SAASN,cAAcA,eAAeE,UAA9C,GACAE,UAFF;AAKA,SAAKjB,eAAeU;EACrB;EAEDU,UAAUC,QAAQnB,UAAUQ,YAAY,GAAG;AACzCR,eAAWA,YAAY;AACvB,QAAI,EAAEQ,aAAa,IAAI;AACrBA,kBAAYW,OAAOjB,aAAaF;IACjC;AACD,SAAKS,WAAWU,OAAOpB,QAAQoB,OAAOnB,WAAWA,UAAUQ,SAA3D;EACD;EAEDH,QAAQG,WAAW;AACjB,QAAI,EAAEA,aAAa,MAAMA,YAAY,KAAKV,aAAa;AACrDU,kBAAY,KAAKN;IAClB;AACD,SAAKJ,eAAeU;AACpB,SAAKX,aAAaW;EACnB;EAEDY,eAAeC,QAAQb,YAAY,GAAG;AACpC,UAAMK,aAAaL,YAAY;AAC/B,UAAMG,eAAe,KAAKV;AAC1BoB,WAAOL,IAAI,KAAKrB,QAAQsB,SAASN,cAAcA,eAAeE,UAAnD,CAAX;AACA,SAAKR,QAAQG,SAAb;EACD;EAEDc,QAAQD,QAAQrB,WAAW,GAAGQ,YAAY,GAAG;AAC3C,UAAMG,eAAe,KAAKV,aAAaD,WAAW;AAClD,UAAMa,aAAaL,YAAY;AAC/Ba,WAAOL,IAAI,KAAKrB,QAAQsB,SAASN,cAAcA,eAAeE,UAAnD,CAAX;EACD;EAEDC,eAAeN,YAAY,GAAG;AAC5B,UAAMe,YAAYC,SAAShB,YAAY,CAAb;AAC1B,QAAI,KAAKb,QAAQiB,SAASW,WAAW;AACnC,YAAME,YAAY,IAAI7B,aAAa2B,SAAjB;AAClBE,gBAAUT,IAAI,KAAKrB,QAAQsB,SAAS,KAAKhB,YAAY,KAAKE,QAA5C,CAAd;AACA,WAAKR,UAAU8B;AACf,WAAK5B,YAAY;IAClB,OAAM;AACL,WAAKS,OAAL;IACD;EACF;EAEDoB,yBAAyBlB,YAAY,GAAG;AACtC,SAAKM,eAAe,KAAKhB,cAAcU,SAAvC;EACD;EAEDF,SAAS;AACP,QAAI,KAAKT,YAAY,GAAG;AACtB,WAAKF,QAAQqB,IAAI,KAAKrB,QAAQsB,SAAS,KAAKhB,YAAY,KAAKE,QAA5C,CAAjB;AACA,WAAKN,YAAY;IAClB;EACF;AAzGmC;ACEvB,IAAM8B,yBAAN,MAA6B;EAC1CjC,YAAYkC,eAAe;AACzB,QAAIA,eAAe;AACjB,WAAKC,eAAe,IAAIpC,iBAAJ;AACpB,WAAKqC,gBAAgB,IAAIrC,iBAAJ;IACtB,OAAM;AACL,WAAKoC,eAAe,KAAKC,gBAAgB;IAC1C;EACF;EAEc,IAAXC,cAAc;AAChB,WAAO,KAAKF;EACb;EAEc,IAAXE,YAAYA,aAAa;AAC3B,SAAKF,eAAeE;EACrB;EAEe,IAAZC,eAAe;AACjB,WAAO,KAAKF;EACb;EAEe,IAAZE,aAAaA,cAAc;AAC7B,SAAKF,gBAAgBE;EACtB;EAED5B,QAAQ;AACN,SAAKyB,aAAazB,MAAlB;AACA,SAAK0B,cAAc1B,MAAnB;EACD;AA7ByC;ACA7B,IAAM6B,iBAAN,cAA6BN,uBAAuB;EACjEjC,YAAYkC,eAAe;AACzB,UAAMA,aAAN;AACA,SAAKM,MAAL;AACA,SAAKC,QAAQ;EACd;EAEO,IAAJC,KAAKA,MAAM;AACb,SAAKD,QAAQC;EAEd;EAEDF,QAAQ;AACN,SAAKG,aAAa;AAClB,SAAKC,cAAc;AACnB,SAAKC,cAAc;EACpB;EAEDC,QAAQ;AACN,UAAMC,SAAS,IAAIR,eAAJ;AACfQ,WAAOL,OAAO,KAAKD;AACnB,WAAOM;EACR;EAEDC,UAAU;AAER,UAAMlC,YAAY,KAAKqB,aAAa3B;AACpC,SAAK4B,cAAcJ,yBAAyBlB,YAAY,KAAK2B,QAAQ,CAArE;AACA,UAAMQ,kBAAkB,KAAKC,UAAUpC,SAAf;AACxB,SAAKqB,aAAaxB,QAAlB;AACA,SAAKyB,cAAcvB,IAAIoC,eAAvB;EACD;EAEDC,UAAUpC,YAAY,GAAG;AACvB,QAAIA,cAAc,GAAG;AACnB,aAAO;IACR;AAED,UAAMqC,MAAM,KAAKhB,aAAa9B;AAC9B,UAAM+C,YAAY,KAAKjB,aAAa5B;AAEpC,UAAM8C,OAAO,KAAKjB,cAAc/B;AAChC,UAAMgB,aAAa,KAAKe,cAAc3B;AAEtC,QAAI6C,OAAO;AACX,QAAIC,IAAI;AAER,WAAO,KAAKZ,aAAa,GAAK;AAC5BU,WAAKhC,aAAa,IAAIkC,CAAlB,KACD,IAAM,KAAKZ,cAAc,KAAKC,cAC/B,KAAKD,aAAaQ,IAAIC,SAAD;AACvBC,WAAKhC,aAAa,IAAIkC,IAAI,CAAtB,KACD,IAAM,KAAKZ,cAAc,KAAKE,cAC/B,KAAKF,aAAaQ,IAAIC,YAAY,CAAb;AACvBG,UAAIA,IAAI;AACR,WAAKZ,cAAc,KAAKF;IACzB;AAED,SAAKE,cAAc;AAEnB,QAAI7B,cAAc,GAAG;AAEnB0C;AAAK,eAAO,MAAM;AAChB,iBAAO,KAAKb,aAAa,GAAK;AAC5B,iBAAKA,cAAc;AACnBW,mBAAOA,OAAO;AACd,gBAAIA,QAAQxC,YAAY,GAAG;AACzB,oBAAM0C;YACP;UACF;AAED,gBAAMC,WAAWL,YAAY,IAAIE;AACjCD,eAAKhC,aAAa,IAAIkC,CAAlB,KACD,IAAM,KAAKZ,cAAcQ,IAAIM,QAAD,IAC7B,KAAKd,aAAaQ,IAAIM,WAAW,CAAZ;AACvBJ,eAAKhC,aAAa,IAAIkC,IAAI,CAAtB,KACD,IAAM,KAAKZ,cAAcQ,IAAIM,WAAW,CAAZ,IAC7B,KAAKd,aAAaQ,IAAIM,WAAW,CAAZ;AAEvBF,cAAIA,IAAI;AACR,eAAKZ,cAAc,KAAKF;QACzB;IACF;AAED,SAAKG,cAAcO,IAAIC,YAAY,IAAItC,YAAY,CAA7B;AACtB,SAAK+B,cAAcM,IAAIC,YAAY,IAAItC,YAAY,CAA7B;AAEtB,WAAOyC;EACR;AAxFgE;ACFpD,IAAMG,gBAAN,MAAoB;EACjC1D,YAAY2D,MAAM;AAChB,SAAKC,QAAQD;EACd;EAEO,IAAJA,OAAO;AACT,WAAO,KAAKC;EACb;EAEc,IAAXvB,cAAc;AAChB,WAAO,KAAKuB,MAAMvB;EACnB;EAEe,IAAZC,eAAe;AACjB,WAAO,KAAKsB,MAAMtB;EACnB;EAEDuB,kBAA+B;AAC7B,UAAM,IAAIC,MAAM,kCAAV;EACP;EAEDC,iBAAiBjD,YAAY,GAAG;AAC9B,WAAO,KAAKwB,aAAa9B,aAAaM,WAAW;AAE/C,YAAMkD,iBAAiB,OAAO,IAAI,KAAK3B,YAAY7B;AAEnD,WAAKqD,gBAAgBG,cAArB;AAEA,UAAI,KAAK3B,YAAY7B,aAAa,OAAO,GAAG;AAC1C;MAED;AACD,WAAKoD,MAAMZ,QAAX;IACD;EACF;EAEDtC,QAAQ;AACN,SAAKkD,MAAMlD,MAAX;EACD;AAtCgC;ACtBnC,IAAMuD,OAAO,WAAW;AACtB;AACD;ACuBc,IAAMC,eAAN,cAA2BR,cAAc;EACtD1D,YAAYmE,aAAaR,MAAMS,WAAWH,MAAM;AAC9C,UAAMN,IAAN;AACA,SAAKS,WAAWA;AAChB,SAAKD,cAAcA;AAEnB,SAAKE,oBAAoB;AACzB,SAAKC,kBAAkB;AACvB,SAAKC,uBAAuB;AAC5B,SAAKpE,YAAY;EAClB;EAEW,IAARG,WAAW;AACb,WAAO,KAAKH;EACb;EAEW,IAARG,SAASA,UAAU;AACrB,QAAIA,WAAW,KAAKH,WAAW;AAC7B,YAAM,IAAIqE,WACR,uDADI;IAGP;AACD,UAAMC,0BACJ,KAAKF,wBAAwB,KAAKpE,YAAYG;AAChD,QAAImE,0BAA0B,GAAG;AAC/B,YAAM,IAAID,WAAW,8CAAf;IACP;AACD,SAAKD,uBAAuBE;AAC5B,SAAKtE,YAAYG;EAClB;EAEiB,IAAdoE,iBAAiB;AACnB,WAAO,KAAKJ;EACb;EAEiB,IAAdI,eAAeA,gBAAgB;AACjC,SAAKhE,MAAL;AACA,SAAK4D,kBAAkBI;EACxB;EAEDC,QAAQ;AACN,SAAKP,SAAL;EACD;EAEDP,gBAAgB/C,YAAY,GAAG;AAC7B,UAAME,UAAU,IAAId,aAAaY,YAAY,CAA7B;AAChB,UAAM8D,qBAAqB,KAAKT,YAAYvC,QAC1CZ,SACAF,WACA,KAAKwD,eAHoB;AAK3B,SAAKA,mBAAmBM;AACxB,SAAKvC,YAAYtB,WAAWC,SAAS,GAAG4D,kBAAxC;EACD;EAEDhD,QAAQiD,QAAQ/D,YAAY,GAAG;AAC7B,SAAKiD,iBAAiB,KAAKQ,uBAAuBzD,SAAlD;AAEA,UAAM8D,qBAAqBE,KAAKC,IAC9BjE,WACA,KAAKwB,aAAa9B,aAAa,KAAK+D,oBAFX;AAI3B,SAAKjC,aAAaV,QAChBiD,QACA,KAAKN,sBACLK,kBAHF;AAMA,UAAMI,gBAAgB,KAAKT,uBAAuBK;AAClD,SAAKL,uBAAuBO,KAAKC,IAAI,KAAKV,mBAAmBW,aAAjC;AAC5B,SAAK1C,aAAa3B,QAChBmE,KAAKG,IAAID,gBAAgB,KAAKX,mBAAmB,CAAjD,CADF;AAIA,SAAKlE,aAAayE;AAClB,WAAOA;EACR;EAEDM,iBAAiBC,OAAO;AACtB,SAAKvD,QAAQuD,MAAMC,MAAM,IAAzB;EACD;EAED1E,QAAQ;AACN,UAAMA,MAAN;AACA,SAAK6D,uBAAuB;EAC7B;AArFqD;ACGxD,IAAMc,wBAAwB;AAa9B,IAAMC,sBAAsBD;AAM5B,IAAME,0BAA0B;AAiBhC,IAAMC,wBAAwBD;AAY9B,IAAME,qBAAqB;AAG3B,IAAMC,gBAAgB,CACpB,CACE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,CAFlD,GAIA,CACE,MAAM,KAAK,KAAK,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC1E,GAAG,GAAG,CAFR,GAIA,CACE,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACzE,GAAG,CAFL,GAIA,CAAC,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAA1E,CAboB;AAkBtB,IAAMC,oBAAoB;AAC1B,IAAMC,oBAAoB;AAG1B,IAAMC,iBAAiB;AACvB,IAAMC,iBAAiB;AACvB,IAAMC,aACHD,iBAAiBD,mBAAmBD,oBAAoBD;AAC3D,IAAMK,YAAYH,iBAAiBE,YAAYJ;AAG/C,IAAMM,kBAAkB;AACxB,IAAMC,kBAAkB;AACxB,IAAMC,cACHD,kBAAkBD,oBAAoBL,oBAAoBD;AAC7D,IAAMS,aAAaH,kBAAkBE,aAAaR;AAEnC,IAAMU,UAAN,cAAsBpE,uBAAuB;EAC1DjC,YAAYkC,eAAe;AACzB,UAAMA,aAAN;AACA,SAAKoE,aAAa;AAClB,SAAKC,iBAAiB;AAEtB,SAAKC,YAAY;AACjB,SAAKC,gBAAgB;AAErB,SAAKC,iBAAiB;AACtB,SAAKC,kBAAkB;AAEvB,SAAKC,SAAS;AACd,SAAKC,cACH,OACAvB,qBACAE,uBACAC,kBAJF;EAMD;EAED/E,QAAQ;AACN,UAAMA,MAAN;AACA,SAAKoG,eAAL;EACD;EAEDA,iBAAiB;AACf,QAAI,KAAKP,gBAAgB;AACvB,WAAKA,iBAAiB;AACtB,WAAKC,YAAY;IAClB;EACF;EAYDK,cAAcE,YAAYC,YAAYC,cAAcC,WAAW;AAE7D,QAAIH,aAAa,GAAG;AAClB,WAAKA,aAAaA;IACnB;AAED,QAAIG,YAAY,GAAG;AACjB,WAAKA,YAAYA;IAClB;AAED,QAAIF,aAAa,GAAG;AAClB,WAAKA,aAAaA;AAClB,WAAKN,iBAAiB;IACvB,OAAM;AAEL,WAAKA,iBAAiB;IACvB;AAED,QAAIO,eAAe,GAAG;AACpB,WAAKA,eAAeA;AACpB,WAAKN,kBAAkB;IACxB,OAAM;AAEL,WAAKA,kBAAkB;IACxB;AAED,SAAKQ,4BAAL;AAEA,SAAKC,uBAAuB,KAAKF,SAAjC;AAGA,SAAKG,QAAQ,KAAKT;EACnB;EAMQ,IAALS,MAAMC,UAAU;AAClB,QAAIC;AAEJ,SAAKX,SAASU;AAGd,SAAKH,4BAAL;AAGA,SAAKK,cACH,KAAKZ,UAAU,KAAKa,mBAAmB,KAAKhB;AAC9C,SAAKiB,YAAY;AACjBH,cAAUzC,KAAK6C,MAAM,KAAKH,cAAc,GAA9B;AAGV,SAAKI,YACH9C,KAAKG,IAAIsC,UAAU,KAAKd,eAAe,KAAKgB,gBAA5C,IACA,KAAKI;EACR;EAEQ,IAALR,QAAQ;AACV,WAAO,KAAKT;EACb;EAEiB,IAAdkB,iBAAiB;AACnB,WAAO,KAAKF;EACb;EAEkB,IAAfG,kBAAkB;AACpB,WACE,KAAKtB,gBACL3B,KAAKG,IAAI,GAAG,KAAKwC,mBAAmB,IAAI,KAAKhB,aAA7C;EAEH;EAKDW,uBAAuBY,gBAAgB,GAAG;AACxC,QAAIC;AAGJA,aAAU,KAAKlB,aAAaiB,gBAAiB;AAC7CC,aAASA,SAAS,KAAK,KAAKA;AAG5BA,cAAUA,SAAS;AAEnB,SAAKxB,gBAAgBwB;AAErB,SAAKC,eAAe,IAAIhI,aAAa,KAAKuG,gBAAgB,CAAtC;AACpB,SAAKD,YAAY,IAAItG,aAAa,KAAKuG,gBAAgB,CAAtC;EAClB;EAED0B,YAAYC,GAAGC,IAAIC,IAAI;AACrB,WAAOF,IAAIC,KAAKA,KAAKD,IAAIE,KAAKA,KAAKF;EACpC;EAKDjB,8BAA8B;AAC5B,QAAIoB;AACJ,QAAIC;AAEJ,QAAI,KAAK9B,gBAAgB;AACvB6B,YAAMvC,YAAYD,YAAY,KAAKa;AACnC2B,YAAM,KAAKJ,YAAYI,KAAKzC,gBAAgBD,cAAtC;AACN,WAAKmB,aAAalC,KAAK6C,MAAMY,MAAM,GAAjB;IACnB;AAED,QAAI,KAAK5B,iBAAiB;AACxB6B,aAAOpC,aAAaD,aAAa,KAAKS;AACtC4B,aAAO,KAAKL,YAAYK,MAAMtC,iBAAiBD,eAAxC;AACP,WAAKgB,eAAenC,KAAK6C,MAAMa,OAAO,GAAlB;IACrB;AAGD,SAAKf,mBAAmB3C,KAAK6C,MAC1B,KAAKZ,aAAa,KAAKC,aAAc,GADhB;AAGxB,SAAKa,aAAa/C,KAAK6C,MAAO,KAAKZ,aAAa,KAAKE,eAAgB,GAAnD;EACnB;EAKY,IAATwB,UAAUC,QAAQ;AACpB,SAAKpC,aAAaoC;EACnB;EAED5F,QAAQ;AACN,UAAMC,SAAS,IAAIsD,QAAJ;AACftD,WAAOsE,QAAQ,KAAKT;AACpB7D,WAAO8D,cACL,KAAKE,YACL,KAAKC,YACL,KAAKC,cACL,KAAKC,SAJP;AAMA,WAAOnE;EACR;EAKD4F,0BAA0B;AACxB,WAAO,KAAKrC,aACR,KAAKsC,mCAAL,IACA,KAAKC,8BAAL;EACL;EAUDA,gCAAgC;AAC9B,QAAIC;AACJ,QAAIC;AACJ,QAAIC;AACJ,QAAIzF,IAAI;AAGR,SAAK0F,uCAAL;AAEAH,iBAAa;AACbC,sBAAkBG,OAAOC;AAGzB,WAAO5F,IAAI,KAAKsE,YAAYtE,IAAIA,IAAI,GAAG;AAErCyF,oBAAc,KAAKI,gCACjB,IAAI7F,GACJ,KAAK2E,YAFO;AAMd,UAAIc,cAAcD,iBAAiB;AACjCA,0BAAkBC;AAClBF,qBAAavF;MACd;IACF;AAED,WAAOuF;EACR;EAUDF,qCAAqC;AACnC,QAAIE;AACJ,QAAIC;AACJ,QAAIC;AACJ,QAAIK,YAAY;AAChB,QAAIC;AACJ,QAAIC;AAGJ,SAAKN,uCAAL;AAEAF,sBAAkBG,OAAOC;AACzBL,iBAAa;AACbQ,wBAAoB;AACpBC,iBAAa;AAQb,WAAOF,YAAY,GAAGA,YAAYA,YAAY,GAAG;AAC/C,UAAIG,IAAI;AACR,aAAO9D,cAAc2D,SAAD,EAAYG,CAAzB,GAA6B;AAClCD,qBAAaD,oBAAoB5D,cAAc2D,SAAD,EAAYG,CAAzB;AACjC,YAAID,cAAc,KAAK1B,YAAY;AACjC;QACD;AAGDmB,sBAAc,KAAKI,gCACjB,IAAIG,YACJ,KAAKrB,YAFO;AAMd,YAAIc,cAAcD,iBAAiB;AACjCA,4BAAkBC;AAClBF,uBAAaS;QACd;AACDC,YAAIA,IAAI;MACT;AACDF,0BAAoBR;IACrB;AAED,WAAOA;EACR;EAMDG,yCAAyC;AACvC,QAAI1F,IAAI;AACR,QAAIkG;AACJ,QAAIC;AAEJ,WAAOnG,IAAI,KAAKkD,eAAelD,IAAIA,IAAI,GAAG;AACxCmG,aAAOnG,KAAK,KAAKkD,gBAAgBlD;AACjCkG,gBAAUlG,IAAI;AACd,WAAK2E,aAAauB,OAAlB,IAA6B,KAAKjD,UAAUiD,OAAf,IAA0BC;AACvD,WAAKxB,aAAauB,UAAU,CAA5B,IAAiC,KAAKjD,UAAUiD,UAAU,CAAzB,IAA8BC;IAChE;EACF;EAEDN,gCAAgCO,gBAAgBC,SAAS;AACvD,UAAMC,SAAS,KAAK1H,aAAa9B;AACjCsJ,sBAAkB,KAAKxH,aAAa5B;AAEpC,QAAIyI,cAAc;AAClB,QAAIzF,IAAI;AACR,UAAMuG,aAAa,IAAI,KAAKrD;AAC5B,QAAIsD;AAEJ,WAAOxG,IAAIuG,YAAYvG,IAAIA,IAAI,GAAG;AAChCwG,qBAAexG,IAAIoG;AACnBX,qBACEa,OAAOE,YAAD,IAAiBH,QAAQrG,CAAD,IAC9BsG,OAAOE,eAAe,CAAhB,IAAqBH,QAAQrG,IAAI,CAAL;IACrC;AAED,WAAOyF;EACR;EAODgB,QAAQC,iBAAiB;AACvB,SAAKC,cAAc,IAAID,eAAvB;EACD;EAKDC,cAAcC,eAAe;AAC3B,UAAMC,QAAQ,KAAKjI,aAAa9B;AAChC8J,qBAAiB,KAAKhI,aAAa5B;AAEnC,UAAMoB,SAAS,KAAKS,cAAc/B;AAClC,UAAMgK,iBAAiB,KAAKjI,cAAc3B;AAE1C,QAAI8C,IAAI;AACR,QAAIkG;AACJ,QAAIa;AACJ,UAAMC,aAAa,IAAI,KAAK9D;AAC5B,QAAI+D;AACJ,QAAIC;AACJ,QAAIC;AAEJ,WAAOnH,IAAI,KAAKkD,eAAelD,IAAIA,IAAI,GAAG;AACxC+G,mBAAa,KAAK7D,gBAAgBlD,KAAKgH;AACvCC,WAAKjH,IAAIgH;AACTd,gBAAU,IAAIlG;AACdkH,oBAAchB,UAAUU;AACxBO,qBAAejB,UAAUY;AACzB1I,aAAO+I,eAAe,CAAhB,IACJN,MAAMK,cAAc,CAAf,IAAoBD,KAAK,KAAKhE,UAAUiD,UAAU,CAAzB,IAA8Ba;AAC9D3I,aAAO+I,eAAe,CAAhB,IACJN,MAAMK,cAAc,CAAf,IAAoBD,KAAK,KAAKhE,UAAUiD,UAAU,CAAzB,IAA8Ba;IAC/D;EACF;EAEDtH,UAAU;AACR,QAAI2H;AACJ,QAAIjB;AACJ,QAAIkB;AAEJ,QAAI,KAAKpE,cAAc,MAAM;AAE3B,UAAI,KAAKrE,aAAa3B,aAAa,KAAKiG,eAAe;AAErD;MACD;AACD,WAAKD,YAAY,IAAItG,aAAa,KAAKuG,gBAAgB,CAAtC;AACjB,WAAKtE,aAAaT,eAAe,KAAK8E,WAAW,KAAKC,aAAtD;IACD;AAGD,WAAO,KAAKtE,aAAa3B,cAAc,KAAKoH,WAAW;AAErD+C,eAAS,KAAKhC,wBAAL;AAOT,WAAKvG,cAAcJ,yBAAyB,KAAKyE,aAAjD;AAGA,WAAKuD,QAAQlF,KAAK6C,MAAMgD,MAAX,CAAb;AACA,WAAKvI,cAAcvB,IAAI,KAAK4F,aAA5B;AAGAiD,aAAO,KAAKjC,mBAAmB,IAAI,KAAKhB;AACxC,UAAIiD,OAAO,GAAG;AACZ,aAAKtH,cAAcZ,UACjB,KAAKW,cACLwI,SAAS,KAAKlE,eACdiD,IAHF;MAKD;AAOD,YAAMmB,QACJ,KAAK1I,aAAa5B,aAClB,KAAKoK,SAAS,KAAKlD,mBAAmB,KAAKhB;AAC7C,WAAKD,UAAUlF,IACb,KAAKa,aAAa9B,OAAOkB,SAASsJ,OAAOA,QAAQ,IAAI,KAAKpE,aAA1D,CADF;AASA,WAAKiB,aAAa,KAAKF;AACvBoD,oBAAc9F,KAAK6C,MAAM,KAAKD,SAAhB;AACd,WAAKA,aAAakD;AAClB,WAAKzI,aAAaxB,QAAQiK,WAA1B;IACD;EACF;AA3ayD;AClH5D,IAAME,iBAAiB,SAASC,GAAGC,GAAG;AACpC,UAAQD,IAAIC,IAAID,IAAIC,IAAIA,IAAID,KAAK;AAClC;ACyBc,IAAME,aAAN,MAAiB;EAC9BjL,cAAc;AACZ,SAAKkL,aAAa,IAAI3I,eAAe,KAAnB;AAClB,SAAK4I,UAAU,IAAI9E,QAAQ,KAAZ;AAEf,SAAKlE,eAAe,IAAIpC,iBAAJ;AACpB,SAAKqL,sBAAsB,IAAIrL,iBAAJ;AAC3B,SAAKqC,gBAAgB,IAAIrC,iBAAJ;AAErB,SAAK0C,QAAQ;AACb,SAAKmE,SAAS;AAEd,SAAKyE,eAAe;AACpB,SAAKC,cAAc;AACnB,SAAKC,eAAe;AAEpB,SAAKC,+BAAL;EACD;EAED9K,QAAQ;AACN,SAAKwK,WAAWxK,MAAhB;AACA,SAAKyK,QAAQzK,MAAb;EACD;EAEDoC,QAAQ;AACN,UAAMC,SAAS,IAAIkI,WAAJ;AACflI,WAAOL,OAAO,KAAKA;AACnBK,WAAOsE,QAAQ,KAAKA;AACpB,WAAOtE;EACR;EAEO,IAAJL,OAAO;AACT,WAAO,KAAKD;EACb;EAEO,IAAJC,KAAKA,MAAM;AACb,SAAK4I,cAAc5I;AACnB,SAAK8I,+BAAL;EACD;EAEa,IAAVC,WAAWA,YAAY;AACzB,SAAKhJ,QAAQ,IAAM,OAAOgJ;EAC3B;EAEQ,IAALpE,QAAQ;AACV,WAAO,KAAKT;EACb;EAEQ,IAALS,MAAMA,OAAO;AACf,SAAKkE,eAAelE;AACpB,SAAKmE,+BAAL;EACD;EAEc,IAAXE,YAAYA,aAAa;AAC3B,SAAKrE,QAAQ,IAAM,OAAOqE;EAC3B;EAEQ,IAALC,MAAMA,OAAO;AACf,SAAKN,eAAeM;AACpB,SAAKH,+BAAL;EACD;EAEe,IAAZI,aAAaA,cAAc;AAC7B,SAAKD,QAAQ7G,KAAK+G,IAAI,gBAAgBD,YAAzB;AACb,SAAKJ,+BAAL;EACD;EAEiB,IAAdM,eAAeA,gBAAgB;AACjC,SAAKF,eAAeE,iBAAiB;EACtC;EAEc,IAAXzJ,cAAc;AAChB,WAAO,KAAKF;EACb;EAEe,IAAZG,eAAe;AACjB,WAAO,KAAKF;EACb;EAEDoJ,iCAAiC;AAC/B,UAAMO,gBAAgB,KAAKnF;AAC3B,UAAMoF,eAAe,KAAKvJ;AAE1B,SAAKmE,SAAS,KAAK2E,eAAe,KAAKF;AACvC,SAAK5I,QAAQ,KAAK6I,cAAc,KAAKD;AAErC,QAAIP,eAAe,KAAKlE,QAAQmF,aAAd,GAA8B;AAC9C,WAAKZ,QAAQ9D,QAAQ,KAAKT;IAC3B;AACD,QAAIkE,eAAe,KAAKrI,OAAOuJ,YAAb,GAA4B;AAC5C,WAAKd,WAAWxI,OAAO,KAAKD;IAC7B;AAED,QAAI,KAAKA,QAAQ,GAAK;AACpB,UAAI,KAAKL,iBAAiB,KAAK8I,WAAW5I,cAAc;AACtD,aAAK6I,QAAQ9I,cAAc,KAAKF;AAChC,aAAKgJ,QAAQ7I,eAAe,KAAK8I;AAEjC,aAAKF,WAAW7I,cAAc,KAAK+I;AACnC,aAAKF,WAAW5I,eAAe,KAAKF;MACrC;IACF,OAAM;AACL,UAAI,KAAKA,iBAAiB,KAAK+I,QAAQ7I,cAAc;AACnD,aAAK4I,WAAW7I,cAAc,KAAKF;AACnC,aAAK+I,WAAW5I,eAAe,KAAK8I;AAEpC,aAAKD,QAAQ9I,cAAc,KAAK+I;AAChC,aAAKD,QAAQ7I,eAAe,KAAKF;MAClC;IACF;EACF;EAEDY,UAAU;AACR,QAAI,KAAKP,QAAQ,GAAK;AACpB,WAAK0I,QAAQnI,QAAb;AACA,WAAKkI,WAAWlI,QAAhB;IACD,OAAM;AACL,WAAKkI,WAAWlI,QAAhB;AACA,WAAKmI,QAAQnI,QAAb;IACD;EACF;AAxH6B;ACLjB,IAAMiJ,uBAAN,MAA2B;EACxCjM,YAAYyB,QAAQ;AAClB,SAAKA,SAASA;AACd,SAAKtB,YAAY;EAClB;EAEc,IAAX+L,cAAc;AAChB,WAAO,KAAKzK,OAAO0K,mBAAmB;EACvC;EAEW,IAAR7L,WAAW;AACb,WAAO,KAAKH;EACb;EAEW,IAARG,SAAS8L,OAAO;AAClB,SAAKjM,YAAYiM;EAClB;EAEDxK,QAAQiD,QAAQ/D,YAAY,GAAGR,WAAW,GAAG;AAC3C,SAAKA,WAAWA;AAChB,QAAI+L,OAAO,KAAK5K,OAAO6K,eAAe,CAA3B;AACX,QAAIC,QAAQ,KAAKL,cACb,KAAKzK,OAAO6K,eAAe,CAA3B,IACA,KAAK7K,OAAO6K,eAAe,CAA3B;AACJ,QAAI/I,IAAI;AACR,WAAOA,IAAIzC,WAAWyC,KAAK;AACzBsB,aAAOtB,IAAI,CAAL,IAAU8I,KAAK9I,IAAIjD,QAAL;AACpBuE,aAAOtB,IAAI,IAAI,CAAT,IAAcgJ,MAAMhJ,IAAIjD,QAAL;IAC1B;AACD,WAAOwE,KAAKC,IAAIjE,WAAWuL,KAAKnL,SAASZ,QAAlC;EACR;AA9BuC;ACV1C,IAAMkM,kBAAkB,SACtB/C,SACAgD,QACAC,yBAAyBzI,MACzB0I,aAAa,MACb;AACA,QAAMC,OAAOnD,QAAQoD,sBAAsBF,YAAY,GAAG,CAA7C;AACb,QAAM3L,UAAU,IAAId,aAAayM,aAAa,CAA9B;AAEhBC,OAAKE,iBAAiB3H,WAAS;AAC7B,QAAIkH,OAAOlH,MAAM7C,aAAagK,eAAe,CAAlC;AACX,QAAIC,QAAQpH,MAAM7C,aAAagK,eAAe,CAAlC;AACZ,QAAIS,kBAAkBN,OAAO7K,QAAQZ,SAAS2L,UAAxB;AACtBD,2BAAuBD,OAAO/H,cAAR;AACtB,QAAIqI,oBAAoB,GAAG;AACzBN,aAAO9H,MAAP;IACD;AACD,QAAIpB,IAAI;AACR,WAAOA,IAAIwJ,iBAAiBxJ,KAAK;AAC/B8I,WAAK9I,CAAD,IAAMvC,QAAQuC,IAAI,CAAL;AACjBgJ,YAAMhJ,CAAD,IAAMvC,QAAQuC,IAAI,IAAI,CAAT;IACnB;;AAEH,SAAOqJ;AACR;ACpCD,IAAMI,MAAM,SAASC,GAAGC,OAAOC,GAAG;AAChCA,MAAIA,KAAK;AACTF,MAAIA,IAAI;AACR,SAAOA,EAAE/L,UAAUgM,QAAQD,IAAI,IAAIG,MAAMF,QAAQD,EAAE/L,SAAS,CAA7B,EAAgCmM,KAAKF,CAArC,IAA0CF;AAC1E;AAED,IAAMK,WAAW,SAASC,MAAM;AAC9B,QAAMC,OAAO1I,KAAK6C,MAAM4F,OAAO,EAAlB;AACb,QAAME,UAAUF,OAAOC,OAAO;AAC9B,SAAQ,GAAEA,QAAQR,IAAIlL,SAAS2L,OAAD,GAAW,CAApB;AACtB;ACmBD,IAAMC,WAAW,SAAUhJ,gBAAgB;AACzC,QAAMiJ,oBAAoB,KAAKC;AAC/B,QAAM7G,aAAa,KAAKA;AACxB,OAAKrC,iBAAiBA;AACtB,OAAKkJ,aAAalJ,iBAAiBqC;AACnC,MAAI4G,sBAAsB,KAAKC,YAAY;AACzC,UAAMA,aAAa,IAAIC,YAAY,QAAQ;MACzCC,QAAQ;QACNF,YAAY,KAAKA;QACjBG,qBAAqB,KAAKA;QAC1BC,kBAAkB,KAAKA;MAHjB;IADiC,CAAxB;AAOnB,SAAKC,MAAMC,cAAcN,UAAzB;EACD;AACF;AAEc,IAAMO,eAAN,MAAmB;EAChCnO,YAAYyJ,SAAShI,QAAQkL,YAAYhI,QAAQV,MAAM;AACrD,SAAKmK,cAAc,IAAInD,WAAJ;AACnB,UAAMoD,SAAS,IAAIpC,qBAAqBxK,MAAzB;AACf,SAAKmM,aAAa;AAClB,SAAKlJ,iBAAiB;AACtB,SAAK4J,UAAU,IAAIpK,aAAamK,QAAQ,KAAKD,aAAazJ,KAA3C;AACf,SAAKsJ,QAAQzB,gBACX/C,SACA,KAAK6E,SACJC,mBAAkBb,SAASc,KAAK,MAAMD,aAApB,GACnB5B,UAJ0B;AAM5B,SAAKtF,QAAQ;AACb,SAAK3E,OAAO;AACZ,SAAK+L,WAAWhN,OAAOgN;AACvB,SAAK1H,aAAa0C,QAAQ1C;AAC1B,SAAK2H,YAAY,CAAA;EAClB;EAEoB,IAAjBC,oBAAoB;AACtB,WAAOrB,SAAS,KAAKmB,QAAN;EAChB;EAEsB,IAAnBV,sBAAsB;AACxB,WAAOT,SAAS,KAAKM,UAAN;EAChB;EAEmB,IAAhBI,mBAAmB;AACrB,WACG,MAAM,KAAKM,QAAQ5J,kBAAmB,KAAK+J,WAAW,KAAK1H;EAE/D;EAEmB,IAAhBiH,iBAAiBY,MAAM;AACzB,SAAKN,QAAQ5J,iBAAiB5C,SAC5B8M,OAAO,KAAKH,WAAW,KAAK1H,UADQ;AAGtC,SAAKrC,iBAAiB,KAAK4J,QAAQ5J;AACnC,SAAKkJ,aAAa,KAAKlJ,iBAAiB,KAAKqC;EAC9C;EAEO,IAAJ6F,OAAO;AACT,WAAO,KAAKqB;EACb;EAEQ,IAALtC,MAAMA,OAAO;AACf,SAAKyC,YAAYzC,QAAQA;EAC1B;EAEiB,IAAdG,eAAe+C,UAAU;AAC3B,SAAKT,YAAYtC,iBAAiB+C;EACnC;EAEO,IAAJnM,KAAKA,MAAM;AACb,SAAK0L,YAAY1L,OAAOA;EACzB;EAEQ,IAAL2E,MAAMA,OAAO;AACf,SAAK+G,YAAY/G,QAAQA;EAC1B;EAEDyH,QAAQC,QAAQ;AACd,SAAKd,MAAMa,QAAQC,MAAnB;EACD;EAEDC,aAAa;AACX,SAAKf,MAAMe,WAAX;EACD;EAEDC,GAAGC,WAAWC,IAAI;AAChB,SAAKT,UAAUU,KAAK;MAAEC,MAAMH;MAAWC;KAAvC;AACA,SAAKlB,MAAMqB,iBAAiBJ,WAAY/J,WAAUgK,GAAGhK,MAAM2I,MAAP,CAApD;EACD;EAEDyB,IAAIL,YAAY,MAAM;AACpB,QAAIR,YAAY,KAAKA;AACrB,QAAIQ,WAAW;AACbR,kBAAYA,UAAUjC,OAAQ+C,OAAMA,EAAEH,SAASH,SAAnC;IACb;AACDR,cAAUe,QAASD,OAAM;AACvB,WAAKvB,MAAMyB,oBAAoBF,EAAEH,MAAOlK,WAAUqK,EAAEL,GAAGhK,MAAM2I,MAAX,CAAlD;KADF;EAGD;AAnF+B;",
  "names": ["FifoSampleBuffer", "constructor", "_vector", "Float32Array", "_position", "_frameCount", "vector", "position", "startIndex", "frameCount", "endIndex", "clear", "receive", "rewind", "put", "numFrames", "putSamples", "samples", "sourceOffset", "length", "numSamples", "ensureCapacity", "destOffset", "set", "subarray", "putBuffer", "buffer", "receiveSamples", "output", "extract", "minLength", "parseInt", "newVector", "ensureAdditionalCapacity", "AbstractFifoSamplePipe", "createBuffers", "_inputBuffer", "_outputBuffer", "inputBuffer", "outputBuffer", "RateTransposer", "reset", "_rate", "rate", "slopeCount", "prevSampleL", "prevSampleR", "clone", "result", "process", "numFramesOutput", "transpose", "src", "srcOffset", "dest", "used", "i", "out", "srcIndex", "FilterSupport", "pipe", "_pipe", "fillInputBuffer", "Error", "fillOutputBuffer", "numInputFrames", "noop", "SimpleFilter", "sourceSound", "callback", "historyBufferSize", "_sourcePosition", "outputBufferPosition", "RangeError", "newOutputBufferPosition", "sourcePosition", "onEnd", "numFramesExtracted", "target", "Math", "min", "currentFrames", "max", "handleSampleData", "event", "data", "USE_AUTO_SEQUENCE_LEN", "DEFAULT_SEQUENCE_MS", "USE_AUTO_SEEKWINDOW_LEN", "DEFAULT_SEEKWINDOW_MS", "DEFAULT_OVERLAP_MS", "_SCAN_OFFSETS", "AUTOSEQ_TEMPO_LOW", "AUTOSEQ_TEMPO_TOP", "AUTOSEQ_AT_MIN", "AUTOSEQ_AT_MAX", "AUTOSEQ_K", "AUTOSEQ_C", "AUTOSEEK_AT_MIN", "AUTOSEEK_AT_MAX", "AUTOSEEK_K", "AUTOSEEK_C", "Stretch", "_quickSeek", "midBufferDirty", "midBuffer", "overlapLength", "autoSeqSetting", "autoSeekSetting", "_tempo", "setParameters", "clearMidBuffer", "sampleRate", "sequenceMs", "seekWindowMs", "overlapMs", "calculateSequenceParameters", "calculateOverlapLength", "tempo", "newTempo", "intskip", "nominalSkip", "seekWindowLength", "skipFract", "floor", "sampleReq", "seekLength", "inputChunkSize", "outputChunkSize", "overlapInMsec", "newOvl", "refMidBuffer", "checkLimits", "x", "mi", "ma", "seq", "seek", "quickSeek", "enable", "seekBestOverlapPosition", "seekBestOverlapPositionStereoQuick", "seekBestOverlapPositionStereo", "bestOffset", "bestCorrelation", "correlation", "preCalculateCorrelationReferenceStereo", "Number", "MIN_VALUE", "calculateCrossCorrelationStereo", "scanCount", "correlationOffset", "tempOffset", "j", "context", "temp", "mixingPosition", "compare", "mixing", "calcLength", "mixingOffset", "overlap", "overlapPosition", "overlapStereo", "inputPosition", "input", "outputPosition", "tempFrame", "frameScale", "fi", "inputOffset", "outputOffset", "offset", "overlapSkip", "start", "testFloatEqual", "a", "b", "SoundTouch", "transposer", "stretch", "_intermediateBuffer", "virtualPitch", "virtualRate", "virtualTempo", "calculateEffectiveRateAndTempo", "rateChange", "tempoChange", "pitch", "pitchOctaves", "exp", "pitchSemitones", "previousTempo", "previousRate", "WebAudioBufferSource", "dualChannel", "numberOfChannels", "value", "left", "getChannelData", "right", "getWebAudioNode", "filter", "sourcePositionCallback", "bufferSize", "node", "createScriptProcessor", "onaudioprocess", "framesExtracted", "pad", "n", "width", "z", "Array", "join", "minsSecs", "secs", "mins", "seconds", "onUpdate", "currentTimePlayed", "timePlayed", "CustomEvent", "detail", "formattedTimePlayed", "percentagePlayed", "_node", "dispatchEvent", "PitchShifter", "_soundtouch", "source", "_filter", "sourcePostion", "call", "duration", "listeners", "formattedDuration", "perc", "semitone", "connect", "toNode", "disconnect", "on", "eventName", "cb", "push", "name", "addEventListener", "off", "e", "forEach", "removeEventListener"]
}
